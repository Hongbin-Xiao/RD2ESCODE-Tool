/***************   LCD滚动显示系统 - 结构化编程版本   ******************/
#include <reg52.h>
#include <string.h>
#include <intrins.h>

/* 类型定义 */
#define uchar unsigned char
#define uint unsigned int

/* 硬件接口定义 */
sbit K1 = P3^0;  // 垂直滚动按键
sbit K2 = P3^1;  // 水平滚动按键
sbit K3 = P3^2;  // 备用按键
sbit RS = P2^0;  // LCD寄存器选择
sbit RW = P2^1;  // LCD读写控制
sbit EN = P2^2;  // LCD使能信号

/* 全局变量 */
bit g_pauseFlag = 0;  // 滚动暂停标志位，改名避免与F0冲突
uchar code Prompt[] = "PRESS K1--K4 TO START DEMO PROG";
uchar const Line_Count = 6;
uchar code Msg[][80] = {
    "Many CAD users dismiss",
    "process of creating PCB",
    "of view.with PCB layout",
    "placement and track routing,",
    "can often be the most time",
    "And if you use circuit simulation",
    "you are going to spend even more"
};
uchar Disp_Buffer[32];  // 显示缓冲区

/* 函数声明 */
void Delayms(uint ms);
uchar Busy_Check(void);
void Write_LCD_Command(uchar cmd);
void Write_LCD_Data(uchar dat);
void Initialize_LCD(void);
void ShowString(uchar x, uchar y, uchar *str);
void V_Scroll_Display(void);
void H_Scroll_Display(void);
void System_Init(void);
void Process_Keys(void);

/* LCD延时函数 */
void Delayms(uint ms)
{
    uchar i;
    while(ms--)
    {
        for(i=0; i<120; i++);
    }
}

/* 检查LCD忙状态 */
uchar Busy_Check()
{
    uchar LCD_Status;
    RS = 0;
    RW = 1;
    EN = 1;
    Delayms(1);
    LCD_Status = P0;
    EN = 0;
    return LCD_Status;
}

/* 写LCD命令 */
void Write_LCD_Command(uchar cmd)
{
    while((Busy_Check() & 0x80) == 0x80);
    RS = 0;
    RW = 0;
    EN = 0;
    P0 = cmd;
    EN = 1;
    Delayms(1);
    EN = 0;
}

/* 写LCD数据 */
void Write_LCD_Data(uchar dat)
{
    while((Busy_Check() & 0x80) == 0x80);
    RS = 1;
    RW = 0;
    EN = 0;
    P0 = dat;
    EN = 1;
    Delayms(1);
    EN = 0;
}

/* 初始化LCD */
void Initialize_LCD()
{
    Write_LCD_Command(0x38);  // 8位数据接口，2行显示，5x7点阵
    Delayms(1);    
    Write_LCD_Command(0x01);  // 清屏
    Delayms(1);    
    Write_LCD_Command(0x06);  // 光标右移，不移屏
    Delayms(1);    
    Write_LCD_Command(0x0c);  // 开显示，不显示光标，光标不闪烁
    Delayms(1);    
}

/* 在指定位置显示字符串 */
void ShowString(uchar x, uchar y, uchar *str)
{
    uchar i = 0;
    if(y == 0)
        Write_LCD_Command(0x80 | x);  // 设置DDRAM地址，第一行起始地址0x80
    if(y == 1)
        Write_LCD_Command(0xc0 | x);  // 设置DDRAM地址，第二行起始地址0xC0
    for(i=0; i<16; i++)
    {
        Write_LCD_Data(str[i]);    
    }
}

/* 垂直滚动显示函数 */
void V_Scroll_Display(void)
{
    uchar i, j, k = 0;
    uchar *p = Msg[0];
    uchar *q = Msg[Line_Count] + strlen(Msg[Line_Count]);
    
    // 遍历所有文本内容
    while(p < q)
    {
        // 填充显示缓冲区
        for(i=0; (i<16) && (p<q); i++)
        {
            // 跳过首尾空格
            if(((i==0) || (i==15)) && *p == ' ')
                p++;
                
            // 处理文本内容
            if(*p != '\0')
            {
                Disp_Buffer[i] = *p++;
            }
            else
            {
                // 切换到下一行文本
                if(++k > Line_Count)
                    break;
                p = Msg[k];
                Disp_Buffer[i] = *p++;
            }
        }
        
        // 用空格填充剩余位置
        for(j=i; j<16; j++)
            Disp_Buffer[j] = ' ';
            
        // 执行垂直滚动动画
        // 检查是否暂停
        while(g_pauseFlag)  // 使用g_pauseFlag替代F0
            Delayms(5);
            
        // 清除上行
        ShowString(0, 0, "                ");
        Delayms(150);
        
        // 检查是否暂停
        while(g_pauseFlag)  // 使用g_pauseFlag替代F0
            Delayms(5);
            
        // 在下行显示文本
        ShowString(0, 1, Disp_Buffer);
        Delayms(150);
        
        // 检查是否暂停
        while(g_pauseFlag)  // 使用g_pauseFlag替代F0
            Delayms(5);
            
        // 将文本移至上行，清除下行
        ShowString(0, 0, Disp_Buffer);
        ShowString(0, 1, "                ");
        Delayms(150);
    }
    
    // 清除显示
    ShowString(0, 0, "                ");
    ShowString(0, 1, "                ");
}

/* 水平滚动显示函数 */
void H_Scroll_Display(void)
{
    uchar m, n, t = 0, L = 0;
    uchar *p = Msg[0];
    uchar *q = Msg[Line_Count] + strlen(Msg[Line_Count]);
    
    // 初始化缓冲区
    for(m=0; m<16; m++)
        Disp_Buffer[m] = ' ';
        
    // 遍历所有文本内容
    while(p < q)
    {
        // 跳过特定位置的空格
        if((m==16 || m==31) && *p == ' ')
            p++;
            
        // 填充缓冲区后半部分
        for(m=16; m<32 && p<q; m++)
        {
            if(*p != '\0')
            {
                Disp_Buffer[m] = *p++;
            }
            else
            {
                // 切换到下一行文本
                if(++t > Line_Count)
                    break;
                p = Msg[t];
                Disp_Buffer[m] = *p++;
            }
        }
        
        // 用空格填充剩余位置
        for(n=m; n<32; n++)
            Disp_Buffer[n] = ' ';
            
        // 执行水平滚动动画
        for(m=0; m<=16; m++)
        {
            // 检查是否暂停
            while(g_pauseFlag)  // 使用g_pauseFlag替代F0
                Delayms(5);
                
            // 显示滚动后的文本
            ShowString(0, L, Disp_Buffer + m);
            
            // 检查是否暂停
            while(g_pauseFlag)  // 使用g_pauseFlag替代F0
                Delayms(5);
                
            Delayms(20);
        }
        
        // 切换显示行
        L = (L==0) ? 1 : 0;
        Delayms(200);
        
        // 更新缓冲区，将后半部分移至前半部分
        for(m=0; m<16; m++)
            Disp_Buffer[m] = Disp_Buffer[m+16];
    }
    
    // 清除可能残留的下行显示
    if(L == 1)
        ShowString(0, 1, "                ");
}

/* 外部中断0服务函数 */
void EX_INT0() interrupt 0
{
    g_pauseFlag = !g_pauseFlag;  // 切换暂停标志，使用g_pauseFlag替代F0
}

/* 系统初始化函数 */
void System_Init(void)
{
    // 初始化中断
    IE = 0x81;   // 使能总中断和外部中断0
    IT0 = 1;     // 设置INT0为下降沿触发
    g_pauseFlag = 0;  // 初始化暂停标志为非暂停状态，使用g_pauseFlag替代F0
    
    // 初始化LCD
    Initialize_LCD();
    
    // 显示欢迎信息
    ShowString(0, 0, Prompt);
    ShowString(0, 1, Prompt+16);
}

/* 按键处理函数 */
void Process_Keys(void)
{
    if(K1 == 0)  // 检测K1按键
    {
        V_Scroll_Display();  // 执行垂直滚动
        Delayms(200);       // 延时防抖
    }
    else if(K2 == 0)  // 检测K2按键
    {
        H_Scroll_Display();  // 执行水平滚动
        Delayms(200);       // 延时防抖
    }
}

/* 主函数 */
void main(void)
{
    System_Init();  // 系统初始化
    
    // 主循环
    while(1)
    {
        Process_Keys();  // 处理按键输入
    }
}
