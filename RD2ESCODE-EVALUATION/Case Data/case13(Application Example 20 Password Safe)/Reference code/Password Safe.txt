#include <AT89x52.h>

// 全局变量定义
unsigned int num = 10;           // 初始化数码管显示内容
bit set = 0;                     // 设置密码标志位
char count = -1;                 // 初始化COUNT=-1，用于密码显示计数器
sbit Beep = P1^2;                // 蜂鸣器
unsigned char temp;
unsigned char pws[6] = {1,2,3,4,5,6};  // 原始密码
unsigned char pwx[6];                   // 新输入的密码存储区
bit rightflag;                          // 密码正确标志位
unsigned char workbuf[6];               // 数码管显示缓冲区

// 段码表和位选码表
unsigned char code tabledu[] = {
    0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x00, 0x40
};  // 段选码，数字0-9、全灭(0x00)、横杠(0x40)
unsigned char code tablewe[] = {
    0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf
};  // 位选码

// 函数声明
unsigned int keyscan();
void delay(unsigned char z);
void setpw();
bit compare();
void init();
void displayError();
void displaySuccess();
void resetSystem();

// 延时函数，单位ms
void delay(unsigned char z)
{
    unsigned char y;
    for(; z>0; z--)
        for(y=120; y>0; y--);
}

// 设置密码函数
void setpw()
{
    keyscan();
}

// 密码比较函数
bit compare()
{
    if((pwx[0]==pws[0]) && (pwx[1]==pws[1]) && (pwx[2]==pws[2]) && 
       (pwx[3]==pws[3]) && (pwx[4]==pws[4]) && (pwx[5]==pws[5])) 
        rightflag = 1;
    else
        rightflag = 0;
    return rightflag;
}

// 系统初始化函数
void init()
{
    TMOD = 0x01;
    TH0 = (65536-500)/200;
    TL0 = (65536-500)%200;
    ET0 = 1;
    EA = 1;
    TR0 = 1;
}

// 显示错误信息并报警
void displayError()
{
    unsigned int i, j;
    P1_1 = 0;                // 锁关
    workbuf[0] = 0X71;       // 数码管显示"F"
    workbuf[1] = 0X71;
    workbuf[2] = 0X71;
    workbuf[3] = 0X71;
    workbuf[4] = 0X71;
    workbuf[5] = 0X71;
    for(i=0; i<1000; i++)    // 蜂鸣器报警
    {
        for(j=0; j<80; j++);
        Beep = ~Beep;
    }
}

// 显示成功信息
void displaySuccess()
{
    P1_0 = 0;                // 锁开
    P1_1 = 1;
    workbuf[0] = tabledu[8]; // 数码管显示"8"
    workbuf[1] = tabledu[8];
    workbuf[2] = tabledu[8];
    workbuf[3] = tabledu[8];
    workbuf[4] = tabledu[8];
    workbuf[5] = tabledu[8];
}

// 重置系统状态
void resetSystem()
{
    P1_1 = 0;                // 锁关
    P1_3 = 1;                // 关闭设置指示灯
    set = 0;                 // 退出设置模式
    num = 10;                // num复位
    count = -1;              // COUNT复位
    workbuf[0] = tabledu[10];// 数码管全灭
    workbuf[1] = tabledu[10];
    workbuf[2] = tabledu[10];
    workbuf[3] = tabledu[10];
    workbuf[4] = tabledu[10];
    workbuf[5] = tabledu[10];
    P1_0 = 1;                // 锁关
}

// 键盘扫描函数
unsigned int keyscan()
{
    // 第一行扫描
    P3 = 0xfe;
    temp = P3;
    temp = temp & 0xf0;
    if(temp != 0xf0)
    {
        delay(5);            // 消抖
        temp = P3;
        temp = temp & 0xf0;
        if(temp != 0xf0)
        {
            count++;         // 输入计数加1
            temp = P3;
            switch(temp)
            {
                case 0xee:   // 7键
                {
                    num = 7;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11]; // 显示"--"
                    }
                }
                break;
                case 0xde:   // 8键
                {
                    num = 8;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
                case 0xbe:   // 9键
                {
                    num = 9;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
                case 0x7e:   // 设置密码键
                {
                    set = 1;             // 设置密码标志位置1
                    P1_3 = 0;            // 点亮设置指示灯
                    workbuf[0] = 0x00;   // 数码管全灭
                    workbuf[1] = 0x00;
                    workbuf[2] = 0x00;
                    workbuf[3] = 0x00;
                    workbuf[4] = 0x00;
                    workbuf[5] = 0x00;
                    count = -1;          // 重置计数器
                    if(count < 6)        // 如果没有输满，继续输入密码
                    {
                        setpw();
                    }
                }
                break;
            }
            while(temp != 0xf0)  // 等待按键释放
            {
                temp = P3;
                temp = temp & 0xf0;
            }
        }
    }

    // 第二行扫描
    P3 = 0xfd;
    temp = P3;
    temp = temp & 0xf0;
    if(temp != 0xf0)
    {
        delay(5);
        temp = P3;
        temp = temp & 0xf0;
        if(temp != 0xf0)
        {
            count++;
            temp = P3;
            switch(temp)
            {
                case 0xed:   // 4键
                {
                    num = 4;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
                case 0xdd:   // 5键
                {
                    num = 5;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
                case 0xbd:   // 6键
                {
                    num = 6;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
            }
            while(temp != 0xf0)
            {
                temp = P3;
                temp = temp & 0xf0;
            }
        }
    }

    // 第三行扫描
    P3 = 0xfb;
    temp = P3;
    temp = temp & 0xf0;
    if(temp != 0xf0)
    {
        delay(5);
        temp = P3;
        temp = temp & 0xf0;
        if(temp != 0xf0)
        {
            count++;
            temp = P3;
            switch(temp)
            {
                case 0xeb:   // 1键
                {
                    num = 1;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
                case 0xdb:   // 2键
                {
                    num = 2;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
                case 0xbb:   // 3键
                {
                    num = 3;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
            }
            while(temp != 0xf0)
            {
                temp = P3;
                temp = temp & 0xf0;
            }
        }
    }

    // 第四行扫描
    P3 = 0xf7;
    temp = P3;
    temp = temp & 0xf0;
    if(temp != 0xf0)
    {
        delay(5);
        temp = P3;
        temp = temp & 0xf0;
        if(temp != 0xf0)
        {
            count++;
            temp = P3;
            switch(temp)
            {
                case 0xd7:   // 0键
                {
                    num = 0;
                    if(count < 6)
                    {
                        if(set == 0)
                            pwx[count] = num;
                        else
                            pws[count] = num;
                        workbuf[count] = tabledu[11];
                    }
                }
                break;
                case 0xe7:   // 确认键
                    num = 20;
                    break;
                case 0x77:   // 复位键
                {
                    resetSystem();
                }
                break;
                case 0xb7:   // 删除键
                {
                    count--;
                    workbuf[count] = 0x00;
                    count--;
                    if(count <= -1)
                        count = -1;
                }
                break;
            }
            while(temp != 0xf0)
            {
                temp = P3;
                temp = temp & 0xf0;
            }
        }
    }
    return(num);
}

// 主函数
void main()
{
    init();
    P0 = 0;
    P1_1 = 0;    // 锁关
    
    while(1)
    {
        keyscan();
        if(num == 20)    // 按下确认键
        {
            if(count == 6)
            {
                if(set == 1)    // 修改密码确认
                {
                    P1_3 = 1;
                    workbuf[0] = 0;
                    workbuf[1] = 0;
                    workbuf[2] = 0;
                    workbuf[3] = 0;
                    workbuf[4] = 0;
                    workbuf[5] = 0;
                }
                else    // 输入密码确认
                {
                    set = 0;
                    compare();
                    if(rightflag == 1)    // 密码输入正确
                    {
                        displaySuccess();
                    }
                    else
                    {
                        displayError();
                        break;
                    }
                }
            }
            else     // 输入的密码位数不为6位时
            {
                displayError();
                break;
            }
        }
    }
}

// 定时器中断函数 - 动态显示数码管
void timer0() interrupt 1
{
    unsigned char i;
    TH0 = (65536-500)/200;
    TL0 = (65536-500)%200;
    for(i=0; i<6; i++)
    {
        P0 = workbuf[i];       // 输出段码
        P2 = tablewe[i];       // 选择显示位置
        delay(5);
        P0 = 0;                // 消隐
    }
}
