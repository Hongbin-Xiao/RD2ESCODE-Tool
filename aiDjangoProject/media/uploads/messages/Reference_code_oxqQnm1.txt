#include <reg52.h>
#define uchar unsigned char
#define uint unsigned int
#define Tol 15               // 容差值
#define PCF8591 0x90         // PCF8591 地址 

// IO定义
sbit SCL=P1^1;               // I2C时钟线接口 
sbit SDA=P1^0;               // I2C数据线接口 
sbit led_1=P1^2;             // 手动指示灯
sbit led_2=P1^3;             // 自动指示灯
sbit key_Up=P3^4;            // 手动控制上按键
sbit key_Down=P3^6;          // 手动控制下按键
sbit key_Left=P3^3;          // 手动控制左按键
sbit key_Right=P3^7;         // 手动控制右按键
sbit key_state=P3^5;         // 手自动切换按键

// 步进电机控制序列
uchar code FirstSet_FWD[]={0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09}; // 正转序列(垂直方向)
uchar code FirstSet_REV[]={0x09,0x08,0x0c,0x04,0x06,0x02,0x03,0x01}; // 反转序列
uchar code Secondset_FWD[]={0x10,0x30,0x20,0x60,0x40,0xc0,0x80,0x90}; // 正转序列(水平方向)
uchar code Secondset_REV[]={0x90,0x80,0xc0,0x40,0x60,0x20,0x30,0x10}; // 反转序列

// 全局变量
uint angle_X=800, angle_Y=800;  // 电机转动角度值
bit DIR_X, DIR_Y;               // 转动方向标志位
uchar loop, AD_Up, AD_Down, AD_Left, AD_Right, ms, blink_ms;
bit Up_CB, Down_CB, Left_CB, Right_CB, SYS_mode, SYS_ERROR;

// I2C通信基本函数
void PCF8591_Delay() { ; } 
  
void start() { 
    SDA=1; 
    PCF8591_Delay(); 
    SCL=1; 
    PCF8591_Delay(); 
    SDA=0; 
    PCF8591_Delay(); 
} 
  
void stop() { 
    SDA=0; 
    PCF8591_Delay(); 
    SCL=1; 
    PCF8591_Delay(); 
    SDA=1; 
    PCF8591_Delay(); 
} 

void respons() { 
    uchar i=0; 
    SCL=1; 
    PCF8591_Delay(); 
    while((SDA==1) && (i<250)) 
        i++; 
    SCL=0; 
    PCF8591_Delay(); 
} 
  
void init() { 
    SDA=1; 
    PCF8591_Delay(); 
    SCL=1; 
    PCF8591_Delay();     
} 
  
uchar read_byte() { 
    uchar i, k=0; 
    SCL=0; 
    PCF8591_Delay(); 
    SDA=1; 
    PCF8591_Delay(); 
    for(i=0; i<8; i++) { 
        SCL=1; 
        PCF8591_Delay(); 
        k=(k<<1)|SDA;
        SCL=0; 
        PCF8591_Delay(); 
    } 
    return k; 
} 
  
void write_byte(uchar date) { 
    uchar i, temp; 
    temp=date; 
    for(i=0; i<8; i++) { 
        temp=temp<<1;
        SCL=0;
        PCF8591_Delay(); 
        SDA=CY; 
        PCF8591_Delay(); 
        SCL=1; 
        PCF8591_Delay();             
    }    
    SCL=0; 
    PCF8591_Delay(); 
    SDA=1; 
    PCF8591_Delay(); 
} 

// PCF8591操作函数
void write_add(uchar control, uchar date) { 
    start(); 
    write_byte(PCF8591);
    respons(); 
    write_byte(control); 
    respons(); 
    write_byte(date); 
    respons(); 
    stop(); 
} 
  
uchar read_add(uchar control) { 
    uchar date; 
    start(); 
    write_byte(PCF8591); 
    respons(); 
    write_byte(control); 
    respons(); 
    start(); 
    write_byte(PCF8591+1);
    respons(); 
    date=read_byte(); 
    stop(); 
    return date; 
} 

uchar DAC(uchar light) {
    start();
    write_byte(PCF8591); 
    respons();
    write_byte(0x40);
    respons();
    write_byte(light);
    respons();
    stop();
    return(1);
}

// 系统功能函数
void delay(uint T) {
    while(T--);
}

void key() {
    // 模式切换检测
    if(!key_state) {
        delay(1000);
        if(!key_state) {
            while(!key_state) 
                Down_CB=Up_CB=Right_CB=Left_CB=0;
            SYS_mode=!SYS_mode;
            angle_X=angle_Y=800;
            DIR_X=DIR_Y=0;
        }
    }
    
    // 手动模式按键处理
    if(!SYS_mode) {
        // 垂直方向控制
        if(!key_Up) {
            Up_CB=1;
            Down_CB=0;  
        } else if(!key_Down) {
            Up_CB=0;
            Down_CB=1;
        } else {
            Down_CB=0;
            Up_CB=0;
        }
        
        // 水平方向控制
        if(!key_Left) {
            Left_CB=1;
            Right_CB=0;
        } else if(!key_Right) {
            Left_CB=0;
            Right_CB=1;
        } else {
            Right_CB=0;
            Left_CB=0;
        }       
    }
}

void proc() {
    // 自动模式且无故障时执行
    if(SYS_mode && SYS_ERROR==0) {
        // 垂直方向控制逻辑
        if(AD_Up > AD_Down) {
            Up_CB=0;
            if(AD_Up-AD_Down >= Tol) {
                Down_CB=1;
            } else if(AD_Up-AD_Down <= 4) {
                Down_CB=0;
            }
        } else {
            Down_CB=0;
            if(AD_Down-AD_Up >= Tol) {
                Up_CB=1;
            } else if(AD_Down-AD_Up <= 4) {
                Up_CB=0;
            }
        }
        
        // 水平方向控制逻辑
        if(AD_Left > AD_Right) {
            Right_CB=0;
            if(AD_Left-AD_Right >= Tol) {
                Left_CB=1;
            } else if(AD_Left-AD_Right <= 7) {
                Left_CB=0;
            }
        } else {
            Left_CB=0;
            if(AD_Right-AD_Left >= Tol) {
                Right_CB=1;
            } else if(AD_Right-AD_Left <= 7) {
                Right_CB=0;
            }
        }   
    } else if(SYS_mode && SYS_ERROR) {
        // 故障状态下停止所有电机
        Right_CB=Left_CB=Up_CB=Down_CB=0;
    }
}

void main(void) {
    // 初始化
    TMOD=0x01;
    TH0=0xf6;
    TL0=0x3b;
    EA=1;
    ET0=1;
    TR0=1;
    init();
    
    // 主循环
    while(1) {
        // 按键检测
        key();
        
        // 读取传感器数据
        AD_Down=read_add(0x00);
        AD_Up=read_add(0x01);
        AD_Right=read_add(0x02);
        AD_Left=read_add(0x03);
        
        // 传感器故障检测
        if(AD_Down==255 || AD_Down==0 || AD_Up==255 || AD_Up==0 || 
           AD_Right==255 || AD_Right==0 || AD_Left==255 || AD_Left==0) {
            SYS_ERROR=1;
        } else {
            SYS_ERROR=0;
        }
        
        // 运行自动控制程序
        proc();
        
        // 更新LED状态
        if(SYS_ERROR==0) {
            if(!SYS_mode) {
                led_1=0;
                led_2=1;
            } else {
                led_1=1;
                led_2=0;
            }
        }
    }
}

// 定时器中断服务程序
void init_1() interrupt 1 {
    TH0=0xf6;
    TL0=0x3b;
    
    // 垂直方向电机控制
    if(Up_CB) {
        P2=P2&0xf0|FirstSet_FWD[loop];
    } else if(Down_CB) {
        P2=P2&0xf0|FirstSet_REV[loop];
    } else {
        P2=P2&0xf0;
    }

    // 水平方向电机控制
    if(Left_CB) {
        P2=P2&0x0f|Secondset_FWD[loop];
    } else if(Right_CB) {
        P2=P2&0x0f|Secondset_REV[loop];
    } else {
        P2=P2&0x0f;
    } 
    
    // 更新步进序列索引
    loop=(loop+1)%8;

    // 故障指示灯闪烁控制
    if(SYS_ERROR==1) {
        blink_ms++;
        if(blink_ms>39) {
            blink_ms=0;
            led_1=!led_1;
            led_2=led_1;
        }   
    }
}
