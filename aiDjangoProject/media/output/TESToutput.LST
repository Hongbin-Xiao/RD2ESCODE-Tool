C51 COMPILER V9.59.0.0   TESTOUTPUT                                                        07/10/2025 16:34:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TESTOUTPUT
OBJECT MODULE PLACED IN C:/Users/12240/Desktop/ai-project/aiDjangoProject/media/output/TESToutput.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.exe C:/Users/12240/Desktop/ai-project/aiDjangoProject/media/output/TESToutpu
                    -t.c

line level    source

   1          #include <reg52.h>
   2          #define uchar unsigned char
   3          #define uint unsigned int
   4          #define Tol 15
   5          #define PCF8591 0x90
   6          
   7          sbit SCL = P1^1;
   8          sbit SDA = P1^0;
   9          sbit led_1 = P1^2;
  10          sbit led_2 = P1^3;
  11          sbit key_Up = P3^4;
  12          sbit key_Down = P3^6;
  13          sbit key_Left = P3^3;
  14          sbit key_Right = P3^7;
  15          sbit key_state = P3^5;
  16          
  17          uchar code FirstSet_FWD[] = {0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09};
  18          uchar code FirstSet_REV[] = {0x09,0x08,0x0c,0x04,0x06,0x02,0x03,0x01};
  19          uchar code Secondset_FWD[] = {0x10,0x30,0x20,0x60,0x40,0xc0,0x80,0x90};
  20          uchar code Secondset_REV[] = {0x90,0x80,0xc0,0x40,0x60,0x20,0x30,0x10};
  21          
  22          uint angle_X = 800, angle_Y = 800;
  23          bit DIR_X, DIR_Y;
  24          uchar loop, AD_Up, AD_Down, AD_Left, AD_Right, ms, blink_ms;
  25          bit Up_CB, Down_CB, Left_CB, Right_CB, SYS_mode, SYS_ERROR;
  26          
  27          void PCF8591_Delay() {;}
  28          
  29          void I2C_Start() {
  30   1          SDA = 1; PCF8591_Delay();
  31   1          SCL = 1; PCF8591_Delay();
  32   1          SDA = 0; PCF8591_Delay();
  33   1      }
  34          
  35          void I2C_Stop() {
  36   1          SDA = 0; PCF8591_Delay();
  37   1          SCL = 1; PCF8591_Delay();
  38   1          SDA = 1; PCF8591_Delay();
  39   1      }
  40          
  41          void I2C_Response() {
  42   1          uchar i = 0;
  43   1          SCL = 1; PCF8591_Delay();
  44   1          while ((SDA == 1) && (i < 250)) i++;
  45   1          SCL = 0; PCF8591_Delay();
  46   1      }
  47          
  48          void I2C_Init() {
  49   1          SDA = 1; PCF8591_Delay();
  50   1          SCL = 1; PCF8591_Delay();
  51   1      }
  52          
  53          uchar I2C_ReadByte() {
  54   1          uchar i, k = 0;
C51 COMPILER V9.59.0.0   TESTOUTPUT                                                        07/10/2025 16:34:38 PAGE 2   

  55   1          SCL = 0; PCF8591_Delay();
  56   1          SDA = 1; PCF8591_Delay();
  57   1          for (i = 0; i < 8; i++) {
  58   2              SCL = 1; PCF8591_Delay();
  59   2              k = (k << 1) | SDA;
  60   2              SCL = 0; PCF8591_Delay();
  61   2          }
  62   1          return k;
  63   1      }
  64          
  65          void I2C_WriteByte(uchar date) {
  66   1          uchar i, temp;
  67   1          temp = date;
  68   1          for (i = 0; i < 8; i++) {
  69   2              temp = temp << 1;
  70   2              SCL = 0; PCF8591_Delay();
  71   2              SDA = CY;
  72   2              PCF8591_Delay();
  73   2              SCL = 1; PCF8591_Delay();
  74   2          }
  75   1          SCL = 0; PCF8591_Delay();
  76   1          SDA = 1; PCF8591_Delay();
  77   1      }
  78          
  79          uchar PCF8591_Read(uchar control) {
  80   1          uchar result;
  81   1          I2C_Start();
  82   1          I2C_WriteByte(PCF8591);
  83   1          I2C_Response();
  84   1          I2C_WriteByte(control);
  85   1          I2C_Response();
  86   1          I2C_Start();
  87   1          I2C_WriteByte(PCF8591 + 1);
  88   1          I2C_Response();
  89   1          result = I2C_ReadByte();
  90   1          I2C_Stop();
  91   1          return result;
  92   1      }
  93          
  94          void DelayMs(uint T) {
  95   1          while (T--);
  96   1      }
  97          
  98          void ManualKeyCheck() {
  99   1          if (!key_state) {
 100   2              DelayMs(1000);
 101   2              if (!key_state) {
 102   3                  while (!key_state) Down_CB = Up_CB = Right_CB = Left_CB = 0;
 103   3                  SYS_mode = !SYS_mode;
 104   3                  angle_X = angle_Y = 800;
 105   3                  DIR_X = DIR_Y = 0;
 106   3              }
 107   2          }
 108   1      
 109   1          if (!SYS_mode) {
 110   2              if (!key_Up) {
 111   3                  Up_CB = 1; Down_CB = 0;
 112   3              } else if (!key_Down) {
 113   3                  Up_CB = 0; Down_CB = 1;
 114   3              } else {
 115   3                  Down_CB = 0; Up_CB = 0;
 116   3              }
C51 COMPILER V9.59.0.0   TESTOUTPUT                                                        07/10/2025 16:34:38 PAGE 3   

 117   2              if (!key_Left) {
 118   3                  Left_CB = 1; Right_CB = 0;
 119   3              } else if (!key_Right) {
 120   3                  Left_CB = 0; Right_CB = 1;
 121   3              } else {
 122   3                  Right_CB = 0; Left_CB = 0;
 123   3              }
 124   2          }
 125   1      }
 126          
 127          void AutoCtrlProc() {
 128   1          if (SYS_mode && SYS_ERROR == 0) {
 129   2              if (AD_Up > AD_Down) {
 130   3                  Up_CB = 0;
 131   3                  if (AD_Up - AD_Down >= Tol) Down_CB = 1;
 132   3                  else if (AD_Up - AD_Down <= 4) Down_CB = 0;
 133   3              } else {
 134   3                  Down_CB = 0;
 135   3                  if (AD_Down - AD_Up >= Tol) Up_CB = 1;
 136   3                  else if (AD_Down - AD_Up <= 4) Up_CB = 0;
 137   3              }
 138   2      
 139   2              if (AD_Left > AD_Right) {
 140   3                  Right_CB = 0;
 141   3                  if (AD_Left - AD_Right >= Tol) Left_CB = 1;
 142   3                  else if (AD_Left - AD_Right <= 7) Left_CB = 0;
 143   3              } else {
 144   3                  Left_CB = 0;
 145   3                  if (AD_Right - AD_Left >= Tol) Right_CB = 1;
 146   3                  else if (AD_Right - AD_Left <= 7) Right_CB = 0;
 147   3              }
 148   2          } else if (SYS_mode && SYS_ERROR) {
 149   2              Right_CB = Left_CB = Up_CB = Down_CB = 0;
 150   2          }
 151   1      }
 152          
 153          void SystemErrorCheck() {
 154   1          if (AD_Down == 255 || AD_Down == 0 || AD_Up == 255 || AD_Up == 0 ||
 155   1              AD_Right == 255 || AD_Right == 0 || AD_Left == 255 || AD_Left == 0) {
 156   2              SYS_ERROR = 1;
 157   2          } else {
 158   2              SYS_ERROR = 0;
 159   2          }
 160   1      }
 161          
 162          void LEDUpdate() {
 163   1          if (SYS_ERROR == 0) {
 164   2              if (!SYS_mode) {
 165   3                  led_1 = 0; led_2 = 1;
 166   3              } else {
 167   3                  led_1 = 1; led_2 = 0;
 168   3              }
 169   2          }
 170   1      }
 171          
 172          void main(void) {
 173   1          TMOD = 0x01;
 174   1          TH0 = 0xf6;
 175   1          TL0 = 0x3b;
 176   1          EA = 1;
 177   1          ET0 = 1;
 178   1          TR0 = 1;
C51 COMPILER V9.59.0.0   TESTOUTPUT                                                        07/10/2025 16:34:38 PAGE 4   

 179   1          I2C_Init();
 180   1      
 181   1          while (1) {
 182   2              ManualKeyCheck();
 183   2              AD_Down = PCF8591_Read(0x00);
 184   2              AD_Up = PCF8591_Read(0x01);
 185   2              AD_Right = PCF8591_Read(0x02);
 186   2              AD_Left = PCF8591_Read(0x03);
 187   2      
 188   2              SystemErrorCheck();
 189   2              AutoCtrlProc();
 190   2              LEDUpdate();
 191   2          }
 192   1      }
 193          
 194          void Timer0_ISR() interrupt 1 {
 195   1          TH0 = 0xf6;
 196   1          TL0 = 0x3b;
 197   1      
 198   1          if (Up_CB) {
 199   2              P2 = (P2 & 0xf0) | FirstSet_FWD[loop];
 200   2          } else if (Down_CB) {
 201   2              P2 = (P2 & 0xf0) | FirstSet_REV[loop];
 202   2          } else {
 203   2              P2 = P2 & 0xf0;
 204   2          }
 205   1      
 206   1          if (Left_CB) {
 207   2              P2 = (P2 & 0x0f) | Secondset_FWD[loop];
 208   2          } else if (Right_CB) {
 209   2              P2 = (P2 & 0x0f) | Secondset_REV[loop];
 210   2          } else {
 211   2              P2 = P2 & 0x0f;
 212   2          }
 213   1      
 214   1          loop = (loop + 1) % 8;
 215   1      
 216   1          if (SYS_ERROR == 1) {
 217   2              blink_ms++;
 218   2              if (blink_ms > 39) {
 219   3                  blink_ms = 0;
 220   3                  led_1 = !led_1;
 221   3                  led_2 = led_1;
 222   3              }
 223   2          }
 224   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    739    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      8    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
