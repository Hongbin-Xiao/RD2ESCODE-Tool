C51 COMPILER V9.59.0.0   TESTPROCEDURAL                                                    07/10/2025 16:33:26 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TESTPROCEDURAL
OBJECT MODULE PLACED IN C:/Users/12240/Desktop/ai-project/aiDjangoProject/media/output/TESTprocedural.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.exe C:/Users/12240/Desktop/ai-project/aiDjangoProject/media/output/TESTproce
                    -dural.c

line level    source

   1          #include <reg52.h>
   2          #define uchar unsigned char
   3          #define uint unsigned int
   4          #define Tol 15
   5          #define PCF8591 0x90
   6          
   7          sbit SCL = P1^1;
   8          sbit SDA = P1^0;
   9          sbit led_1 = P1^2;
  10          sbit led_2 = P1^3;
  11          sbit key_Up = P3^4;
  12          sbit key_Down = P3^6;
  13          sbit key_Left = P3^3;
  14          sbit key_Right = P3^7;
  15          sbit key_state = P3^5;
  16          
  17          uchar code FirstSet_FWD[] = {0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09};
  18          uchar code FirstSet_REV[] = {0x09,0x08,0x0c,0x04,0x06,0x02,0x03,0x01};
  19          uchar code Secondset_FWD[] = {0x10,0x30,0x20,0x60,0x40,0xc0,0x80,0x90};
  20          uchar code Secondset_REV[] = {0x90,0x80,0xc0,0x40,0x60,0x20,0x30,0x10};
  21          
  22          uint angle_X = 800, angle_Y = 800;
  23          bit DIR_X, DIR_Y;
  24          uchar loop, AD_Up, AD_Down, AD_Left, AD_Right, ms, blink_ms;
  25          bit Up_CB, Down_CB, Left_CB, Right_CB, SYS_mode, SYS_ERROR;
  26          
  27          void pcf_delay() {
  28   1          ;
  29   1      }
  30          
  31          void i2c_start() {
  32   1          SDA = 1; pcf_delay();
  33   1          SCL = 1; pcf_delay();
  34   1          SDA = 0; pcf_delay();
  35   1      }
  36          
  37          void i2c_stop() {
  38   1          SDA = 0; pcf_delay();
  39   1          SCL = 1; pcf_delay();
  40   1          SDA = 1; pcf_delay();
  41   1      }
  42          
  43          void i2c_resp() {
  44   1          uchar i = 0;
  45   1          SCL = 1; pcf_delay();
  46   1          while ((SDA == 1) && (i < 250)) i++;
  47   1          SCL = 0; pcf_delay();
  48   1      }
  49          
  50          void i2c_init() {
  51   1          SDA = 1; pcf_delay();
  52   1          SCL = 1; pcf_delay();
  53   1      }
  54          
C51 COMPILER V9.59.0.0   TESTPROCEDURAL                                                    07/10/2025 16:33:26 PAGE 2   

  55          uchar i2c_readbyte() {
  56   1          uchar i, k = 0;
  57   1          SCL = 0; pcf_delay();
  58   1          SDA = 1; pcf_delay();
  59   1          for (i = 0; i < 8; i++) {
  60   2              SCL = 1; pcf_delay();
  61   2              k = (k << 1) | SDA;
  62   2              SCL = 0; pcf_delay();
  63   2          }
  64   1          return k;
  65   1      }
  66          
  67          void i2c_writebyte(uchar date) {
  68   1          uchar i, temp;
  69   1          temp = date;
  70   1          for (i = 0; i < 8; i++) {
  71   2              temp = temp << 1;
  72   2              SCL = 0; pcf_delay();
  73   2              SDA = CY; pcf_delay();
  74   2              SCL = 1; pcf_delay();
  75   2          }
  76   1          SCL = 0; pcf_delay();
  77   1          SDA = 1; pcf_delay();
  78   1      }
  79          
  80          uchar read_sensor(uchar channel) {
  81   1          uchar d;
  82   1          i2c_start();
  83   1          i2c_writebyte(PCF8591); i2c_resp();
  84   1          i2c_writebyte(channel); i2c_resp();
  85   1          i2c_start();
  86   1          i2c_writebyte(PCF8591 + 1); i2c_resp();
  87   1          d = i2c_readbyte();
  88   1          i2c_stop();
  89   1          return d;
  90   1      }
  91          
  92          uchar write_dac(uchar light) {
  93   1          i2c_start();
  94   1          i2c_writebyte(PCF8591); i2c_resp();
  95   1          i2c_writebyte(0x40); i2c_resp();
  96   1          i2c_writebyte(light); i2c_resp();
  97   1          i2c_stop();
  98   1          return 1;
  99   1      }
 100          
 101          void wait(uint t) {
 102   1          while (t--);
 103   1      }
 104          
 105          void check_key() {
 106   1          if (!key_state) {
 107   2              wait(1000);
 108   2              if (!key_state) {
 109   3                  while (!key_state)
 110   3                      Down_CB = Up_CB = Right_CB = Left_CB = 0;
 111   3                  SYS_mode = !SYS_mode;
 112   3                  angle_X = angle_Y = 800;
 113   3                  DIR_X = DIR_Y = 0;
 114   3              }
 115   2          }
 116   1      
C51 COMPILER V9.59.0.0   TESTPROCEDURAL                                                    07/10/2025 16:33:26 PAGE 3   

 117   1          if (!SYS_mode) {
 118   2              if (!key_Up) {
 119   3                  Up_CB = 1; Down_CB = 0;
 120   3              } else if (!key_Down) {
 121   3                  Up_CB = 0; Down_CB = 1;
 122   3              } else {
 123   3                  Down_CB = 0; Up_CB = 0;
 124   3              }
 125   2              if (!key_Left) {
 126   3                  Left_CB = 1; Right_CB = 0;
 127   3              } else if (!key_Right) {
 128   3                  Left_CB = 0; Right_CB = 1;
 129   3              } else {
 130   3                  Right_CB = 0; Left_CB = 0;
 131   3              }
 132   2          }
 133   1      }
 134          
 135          void auto_control() {
 136   1          if (SYS_mode && SYS_ERROR == 0) {
 137   2              if (AD_Up > AD_Down) {
 138   3                  Up_CB = 0;
 139   3                  if (AD_Up - AD_Down >= Tol) Down_CB = 1;
 140   3                  else if (AD_Up - AD_Down <= 4) Down_CB = 0;
 141   3              } else {
 142   3                  Down_CB = 0;
 143   3                  if (AD_Down - AD_Up >= Tol) Up_CB = 1;
 144   3                  else if (AD_Down - AD_Up <= 4) Up_CB = 0;
 145   3              }
 146   2              if (AD_Left > AD_Right) {
 147   3                  Right_CB = 0;
 148   3                  if (AD_Left - AD_Right >= Tol) Left_CB = 1;
 149   3                  else if (AD_Left - AD_Right <= 7) Left_CB = 0;
 150   3              } else {
 151   3                  Left_CB = 0;
 152   3                  if (AD_Right - AD_Left >= Tol) Right_CB = 1;
 153   3                  else if (AD_Right - AD_Left <= 7) Right_CB = 0;
 154   3              }
 155   2          } else if (SYS_mode && SYS_ERROR) {
 156   2              Right_CB = Left_CB = Up_CB = Down_CB = 0;
 157   2          }
 158   1      }
 159          
 160          void check_sys_err() {
 161   1          if (AD_Down == 255 || AD_Down == 0 || AD_Up == 255 || AD_Up == 0 ||
 162   1              AD_Right == 255 || AD_Right == 0 || AD_Left == 255 || AD_Left == 0)
 163   1              SYS_ERROR = 1;
 164   1          else
 165   1              SYS_ERROR = 0;
 166   1      }
 167          
 168          void update_led() {
 169   1          if (SYS_ERROR == 0) {
 170   2              if (!SYS_mode) {
 171   3                  led_1 = 0; led_2 = 1;
 172   3              } else {
 173   3                  led_1 = 1; led_2 = 0;
 174   3              }
 175   2          }
 176   1      }
 177          
 178          void main(void) {
C51 COMPILER V9.59.0.0   TESTPROCEDURAL                                                    07/10/2025 16:33:26 PAGE 4   

 179   1          TMOD = 0x01;
 180   1          TH0 = 0xf6;
 181   1          TL0 = 0x3b;
 182   1          EA = 1;
 183   1          ET0 = 1;
 184   1          TR0 = 1;
 185   1          i2c_init();
 186   1      
 187   1          while (1) {
 188   2              check_key();
 189   2              AD_Down = read_sensor(0x00);
 190   2              AD_Up = read_sensor(0x01);
 191   2              AD_Right = read_sensor(0x02);
 192   2              AD_Left = read_sensor(0x03);
 193   2              check_sys_err();
 194   2              auto_control();
 195   2              update_led();
 196   2          }
 197   1      }
 198          
 199          void timer0_proc() interrupt 1 {
 200   1          TH0 = 0xf6; TL0 = 0x3b;
 201   1          if (Up_CB) {
 202   2              P2 = P2 & 0xf0 | FirstSet_FWD[loop];
 203   2          } else if (Down_CB) {
 204   2              P2 = P2 & 0xf0 | FirstSet_REV[loop];
 205   2          } else {
 206   2              P2 = P2 & 0xf0;
 207   2          }
 208   1      
 209   1          if (Left_CB) {
 210   2              P2 = P2 & 0x0f | Secondset_FWD[loop];
 211   2          } else if (Right_CB) {
 212   2              P2 = P2 & 0x0f | Secondset_REV[loop];
 213   2          } else {
 214   2              P2 = P2 & 0x0f;
 215   2          }
 216   1      
 217   1          loop = (loop + 1) % 8;
 218   1      
 219   1          if (SYS_ERROR == 1) {
 220   2              blink_ms++;
 221   2              if (blink_ms > 39) {
 222   3                  blink_ms = 0;
 223   3                  led_1 = !led_1;
 224   3                  led_2 = led_1;
 225   3              }
 226   2          }
 227   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    766    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      8    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
