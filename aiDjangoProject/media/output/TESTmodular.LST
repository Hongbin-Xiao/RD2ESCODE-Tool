C51 COMPILER V9.59.0.0   TESTMODULAR                                                       07/10/2025 16:33:26 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TESTMODULAR
OBJECT MODULE PLACED IN C:/Users/12240/Desktop/ai-project/aiDjangoProject/media/output/TESTmodular.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.exe C:/Users/12240/Desktop/ai-project/aiDjangoProject/media/output/TESTmodul
                    -ar.c

line level    source

   1          #include <reg52.h>
   2          #define uchar unsigned char
   3          #define uint unsigned int
   4          #define Tol 15
   5          #define PCF8591 0x90
   6          
   7          sbit SCL = P1^1;
   8          sbit SDA = P1^0;
   9          sbit led_1 = P1^2;
  10          sbit led_2 = P1^3;
  11          sbit key_Up = P3^4;
  12          sbit key_Down = P3^6;
  13          sbit key_Left = P3^3;
  14          sbit key_Right = P3^7;
  15          sbit key_state = P3^5;
  16          
  17          uchar code FirstSet_FWD[]    = {0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09};
  18          uchar code FirstSet_REV[]    = {0x09,0x08,0x0c,0x04,0x06,0x02,0x03,0x01};
  19          uchar code Secondset_FWD[]   = {0x10,0x30,0x20,0x60,0x40,0xc0,0x80,0x90};
  20          uchar code Secondset_REV[]   = {0x90,0x80,0xc0,0x40,0x60,0x20,0x30,0x10};
  21          
  22          uint angle_X = 800, angle_Y = 800;
  23          bit DIR_X, DIR_Y;
  24          uchar loop, AD_Up, AD_Down, AD_Left, AD_Right, ms, blink_ms;
  25          bit Up_CB, Down_CB, Left_CB, Right_CB, SYS_mode, SYS_ERROR;
  26          
  27          //------------ I2C模块 ------------
  28          void PCF8591_Delay(void) {;}
  29          
  30          void I2C_Start(void) {
  31   1          SDA = 1; PCF8591_Delay();
  32   1          SCL = 1; PCF8591_Delay();
  33   1          SDA = 0; PCF8591_Delay();
  34   1      }
  35          
  36          void I2C_Stop(void) {
  37   1          SDA = 0; PCF8591_Delay();
  38   1          SCL = 1; PCF8591_Delay();
  39   1          SDA = 1; PCF8591_Delay();
  40   1      }
  41          
  42          void I2C_Response(void) {
  43   1          uchar i = 0;
  44   1          SCL = 1; PCF8591_Delay();
  45   1          while ((SDA == 1) && (i < 250)) i++;
  46   1          SCL = 0; PCF8591_Delay();
  47   1      }
  48          
  49          void I2C_Init(void) {
  50   1          SDA = 1; PCF8591_Delay();
  51   1          SCL = 1; PCF8591_Delay();
  52   1      }
  53          
  54          uchar I2C_ReadByte(void) {
C51 COMPILER V9.59.0.0   TESTMODULAR                                                       07/10/2025 16:33:26 PAGE 2   

  55   1          uchar i, k = 0;
  56   1          SCL = 0; PCF8591_Delay();
  57   1          SDA = 1; PCF8591_Delay();
  58   1          for (i = 0; i < 8; i++) {
  59   2              SCL = 1; PCF8591_Delay();
  60   2              k = (k << 1) | SDA;
  61   2              SCL = 0; PCF8591_Delay();
  62   2          }
  63   1          return k;
  64   1      }
  65          
  66          void I2C_WriteByte(uchar date) {
  67   1          uchar i, temp;
  68   1          temp = date;
  69   1          for (i = 0; i < 8; i++) {
  70   2              temp = temp << 1;
  71   2              SCL = 0; PCF8591_Delay();
  72   2              SDA = CY;
  73   2              PCF8591_Delay();
  74   2              SCL = 1; PCF8591_Delay();
  75   2          }
  76   1          SCL = 0; PCF8591_Delay();
  77   1          SDA = 1; PCF8591_Delay();
  78   1      }
  79          
  80          //------------ PCF8591模块 ------------
  81          void PCF8591_Write(uchar control, uchar value) { // 修正参数名
  82   1          I2C_Start();
  83   1          I2C_WriteByte(PCF8591);
  84   1          I2C_Response();
  85   1          I2C_WriteByte(control);
  86   1          I2C_Response();
  87   1          I2C_WriteByte(value);
  88   1          I2C_Response();
  89   1          I2C_Stop();
  90   1      }
  91          
  92          uchar PCF8591_Read(uchar control) {
  93   1          uchar result;
  94   1          I2C_Start();
  95   1          I2C_WriteByte(PCF8591);
  96   1          I2C_Response();
  97   1          I2C_WriteByte(control);
  98   1          I2C_Response();
  99   1          I2C_Start();
 100   1          I2C_WriteByte(PCF8591 + 1);
 101   1          I2C_Response();
 102   1          result = I2C_ReadByte();
 103   1          I2C_Stop();
 104   1          return result;
 105   1      }
 106          
 107          uchar PCF8591_DAC(uchar light) {
 108   1          I2C_Start();
 109   1          I2C_WriteByte(PCF8591);
 110   1          I2C_Response();
 111   1          I2C_WriteByte(0x40);
 112   1          I2C_Response();
 113   1          I2C_WriteByte(light);
 114   1          I2C_Response();
 115   1          I2C_Stop();
 116   1          return 1;
C51 COMPILER V9.59.0.0   TESTMODULAR                                                       07/10/2025 16:33:26 PAGE 3   

 117   1      }
 118          
 119          //------------ 控制与延时模块 ------------
 120          void DelayMs(uint T) {
 121   1          while (T--);
 122   1      }
 123          
 124          void ManualKeyCheck(void) {
 125   1          if (!key_state) {
 126   2              DelayMs(1000);
 127   2              if (!key_state) {
 128   3                  while (!key_state) Down_CB = Up_CB = Right_CB = Left_CB = 0;
 129   3                  SYS_mode = !SYS_mode;
 130   3                  angle_X = angle_Y = 800;
 131   3                  DIR_X = DIR_Y = 0;
 132   3              }
 133   2          }
 134   1      
 135   1          if (!SYS_mode) {
 136   2              if (!key_Up) {
 137   3                  Up_CB = 1; Down_CB = 0;
 138   3              } else if (!key_Down) {
 139   3                  Up_CB = 0; Down_CB = 1;
 140   3              } else {
 141   3                  Down_CB = 0; Up_CB = 0;
 142   3              }
 143   2              if (!key_Left) {
 144   3                  Left_CB = 1; Right_CB = 0;
 145   3              } else if (!key_Right) {
 146   3                  Left_CB = 0; Right_CB = 1;
 147   3              } else {
 148   3                  Right_CB = 0; Left_CB = 0;
 149   3              }
 150   2          }
 151   1      }
 152          
 153          void AutoCtrlProc(void) {
 154   1          if (SYS_mode && SYS_ERROR == 0) {
 155   2              if (AD_Up > AD_Down) {
 156   3                  Up_CB = 0;
 157   3                  if (AD_Up - AD_Down >= Tol) Down_CB = 1;
 158   3                  else if (AD_Up - AD_Down <= 4) Down_CB = 0;
 159   3              } else {
 160   3                  Down_CB = 0;
 161   3                  if (AD_Down - AD_Up >= Tol) Up_CB = 1;
 162   3                  else if (AD_Down - AD_Up <= 4) Up_CB = 0;
 163   3              }
 164   2      
 165   2              if (AD_Left > AD_Right) {
 166   3                  Right_CB = 0;
 167   3                  if (AD_Left - AD_Right >= Tol) Left_CB = 1;
 168   3                  else if (AD_Left - AD_Right <= 7) Left_CB = 0;
 169   3              } else {
 170   3                  Left_CB = 0;
 171   3                  if (AD_Right - AD_Left >= Tol) Right_CB = 1;
 172   3                  else if (AD_Right - AD_Left <= 7) Right_CB = 0;
 173   3              }
 174   2          } else if (SYS_mode && SYS_ERROR) {
 175   2              Right_CB = Left_CB = Up_CB = Down_CB = 0;
 176   2          }
 177   1      }
 178          
C51 COMPILER V9.59.0.0   TESTMODULAR                                                       07/10/2025 16:33:26 PAGE 4   

 179          void SystemErrorCheck(void) {
 180   1          if (AD_Down == 255 || AD_Down == 0 || AD_Up == 255 || AD_Up == 0 ||
 181   1              AD_Right == 255 || AD_Right == 0 || AD_Left == 255 || AD_Left == 0) {
 182   2              SYS_ERROR = 1;
 183   2          } else {
 184   2              SYS_ERROR = 0;
 185   2          }
 186   1      }
 187          
 188          void LEDUpdate(void) {
 189   1          if (SYS_ERROR == 0) {
 190   2              if (!SYS_mode) {
 191   3                  led_1 = 0; led_2 = 1;
 192   3              } else {
 193   3                  led_1 = 1; led_2 = 0;
 194   3              }
 195   2          }
 196   1      }
 197          
 198          //------------ 主函数与中断服务 ------------
 199          void main(void) {
 200   1          TMOD = 0x01;
 201   1          TH0 = 0xf6;
 202   1          TL0 = 0x3b;
 203   1          EA = 1;
 204   1          ET0 = 1;
 205   1          TR0 = 1;
 206   1          I2C_Init();
 207   1      
 208   1          while (1) {
 209   2              ManualKeyCheck();
 210   2              AD_Down = PCF8591_Read(0x00);
 211   2              AD_Up = PCF8591_Read(0x01);
 212   2              AD_Right = PCF8591_Read(0x02);
 213   2              AD_Left = PCF8591_Read(0x03);
 214   2      
 215   2              SystemErrorCheck();
 216   2              AutoCtrlProc();
 217   2              LEDUpdate();
 218   2          }
 219   1      }
 220          
 221          void Timer0_ISR(void) interrupt 1 {
 222   1          TH0 = 0xf6;
 223   1          TL0 = 0x3b;
 224   1      
 225   1          if (Up_CB) {
 226   2              P2 = (P2 & 0xf0) | FirstSet_FWD[loop];
 227   2          } else if (Down_CB) {
 228   2              P2 = (P2 & 0xf0) | FirstSet_REV[loop];
 229   2          } else {
 230   2              P2 = P2 & 0xf0;
 231   2          }
 232   1      
 233   1          if (Left_CB) {
 234   2              P2 = (P2 & 0x0f) | Secondset_FWD[loop];
 235   2          } else if (Right_CB) {
 236   2              P2 = (P2 & 0x0f) | Secondset_REV[loop];
 237   2          } else {
 238   2              P2 = P2 & 0x0f;
 239   2          }
 240   1      
C51 COMPILER V9.59.0.0   TESTMODULAR                                                       07/10/2025 16:33:26 PAGE 5   

 241   1          loop = (loop + 1) % 8;
 242   1      
 243   1          if (SYS_ERROR == 1) {
 244   2              blink_ms++;
 245   2              if (blink_ms > 39) {
 246   3                  blink_ms = 0;
 247   3                  led_1 = !led_1;
 248   3                  led_2 = led_1;
 249   3              }
 250   2          }
 251   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    787    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      8    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
